<div class="jumbotron jumbotron-fluid jumboIndex">
    <div class="row jumboHeader">
        <div class="col-lg-2"></div>
        <div class="col-lg-8">
            <h1 class="indexTitle">Task Master</h1>
            <p class="indexMotto">"When you need to tackle, track, and tame your to-do list"</p> 
        </div>
        <div class="col-lg-2">
            <button class="btn btn-lg btn-primary border border-0 indexLogoutBtn" type="logout" id="logout">Logout</button>
        </div>
    </div>
</div>
<div class="container">
    <div class="row">
        <div class="col-lg-6">
            <div class="row">
                <h2 class="addTaskTitle textcenter">Task List:</h2>
                <p><form action="api/tasks" method="POST"><span class="addTask indentA">Add a Task: &nbsp;&nbsp;&nbsp; </span><input type="text" size="40" name="title"><button type="submit" > + </button></form></p>  
            </div>  
            <hr class="topdivider">
            <div class="row">
                <div class="col-lg-12">
                    <ul>
                        {{#each tasks}}
                            {{#unless this.complete}}
                                <div class="row">
                                    <a href="task/{{this.id}}">{{this.title}}</a>
                                    <button data-taskId="{{this.id}}" data-state="paused" data-intervalid="0" class='startPauseTask'>Start</button>&nbsp;&nbsp;
                                    <button data-taskId="{{this.id}}" class='taskComplete'> Complete </button>
                                </div>
                                <div class="row">
                                    <p>{{this.description}}</p>
                                </div>
                                <div class="row">
                                    <form action="api/tasks" method="POST">
                                        <input type="hidden" name="TaskId" value="{{this.id}}">
                                        Add a Sub Task: <input type="text" name="title">
                                        <button type="submit" > + </button>
                                    </form>
                                </div>
                                <div class="nestedTasks" data-root-task-id="{{this.id}}"></div>
                                <hr class="taskdivider">
                            {{/unless}}
                        {{/each}}
                    </ul>
                </div>
            </div>
        </div>
        <div class="col-lg-6">
            <div class="row">
                <h2 class="completeTitle textcenter">Completed Tasks:</h2>
            </div>  
            <hr class="topdivider">
            
            <ul>
              {{#each tasks}}
                {{#if complete}}
                  <div class="row">
                    <s><a href="task/{{this.id}}">{{this.title}}</a></s>&nbsp;&nbsp;
                    <button data-taskId="{{this.id}}" class="taskIncomplete">Incomplete</button><br>
                  </div>
                  <br>
                {{/if}}
              {{/each}}
            </ul>
        </div>
  </div>
</div>
<style>
  * {
  border: red solid 1px;
}
  .list-group-item {
    line-height: 2.5;
  }
  body {
    background-color: rgb(213, 213, 213);
    font-family: 'Baloo', cursive;
  }
  .jumbo {
    background-color: rgb(213, 213, 213);
    font-family: 'Baloo', cursive;
  }
  .round {
    border-radius: 20px;
  }
  .inputField {
    margin-top: 25px;
    margin-right: auto;
    margin-bottom: 25px;
    margin-left: auto;
    width: 85%;
  }
  .inputText {
    font-weight: 500;
    font-size: 20px;
  }
  .authTitle {
    font-weight: 300;
    font-size: 48px;
    color: black;
    text-align: center;
  } 
  .authFormText {
  font-size: 36 px;
    color: black;
    text-align: center;
  }
  .authBody {
    border-color: black;
    border-style: solid;
    border-width: 0px 5px 0px 5px;
    padding-bottom: 25px;
  }
  .authHeader {
    background-color: #6D7993;
    text-align: center;
    display: block;
    margin-left: 0;
    margin-right: 0;
    padding-bottom: 30px;
    padding-top: 10px;
    max-height: 80px;
    border-radius: 20px 20px 0px 0px;
    border-color: black;
    border-style: solid;
    border-width: 5px 5px 0px 5px;
  }
  .authFooter {
    background-color: #6D7993;
    height: 60px;
    border-radius: 0px 0px 20px 20px;
    border-color: black;
    border-style: solid;
    border-width: 0px 5px 5px 5px;
  }
  .authModalLoginBtn {
      background-color: #6D7993;
              color: black;
              font-weight: bold;
              width: 110px;
              margin-right: 0px;
              border-radius: 18px;
              cursor: pointer;
  }
  .authModalLoginBtn:hover {
    background-color: #96858F;
            color: black;
            font-weight: bold;
            width: 110px;
            margin-right: 0px;
            border-radius: 18px;
            cursor: pointer;
  }
  .authModalRegisterBtn {
            background-color: #6D7993;
              color: black;
              font-weight: bold;
              border-radius: 18px;
              margin-top: 10px;
              text-align: center;
              cursor: pointer;
  }
  .authModalRegisterBtn:hover {
    background-color: #96858F;
            color: black;
            font-weight: bold;
            border-radius: 18px;
            text-align: center;
            margin-top: 10px;
            cursor: pointer;
  }
  .authModalLogoutBtn {
            background-color: #6D7993;
              color: black;
              font-weight: bold;
  }
.indexTitle {
  font-weight: 300;
  font-size: 65px;
  color: black;
  text-align: center;
  margin-top: 10px;
} 
.indexMotto {
  font-weight: 300;
  font-size: 20px;
  color: black;
  text-align: center;
}
.addTaskTitle {
  font-weight: 300;
  font-size: 40px;
  color: black;
  text-align: center;
}
.addTask {
  font-weight: 300;
  font-size: 20px;
  color: black;
  text-align: center;
}
.completeTitle {
  font-weight: 300;
  font-size: 40px;
  color: black;
  text-align: center;
  margin-bottom: 40px;
}
.topdivider {
  border: 2px solid #6D7993;
  width: 90%;
}
.taskdivider {
  border: 1px solid #6D7993;
}

.jumboIndex {
  background-color: #6D7993;
  font-family: 'Baloo', cursive;
}
.indentA {
  margin-left: 10px; 
}
.textcenter {
  margin-left: auto;
  margin-right: auto;
}
.jumboHeader{
  align-content: center;
  max-height: 45px;
  margin-bottom: -10px;
  margin-top: -20px;
}
.indexLogoutBtn {
    background-color: #9099A2;
    color: black;
    font-weight: bold;
    width: 110px;
    border-radius: 18px;
    cursor: pointer;
    margin-top: 50px;
}
.indexLogoutBtn:hover {
background-color: #96858F;
        color: black;
        font-weight: bold;
        width: 110px;
        margin-right: 0px;
        border-radius: 18px;
        cursor: pointer;
        margin-top: 50px;
}
</style>
<script>

  const startPauseButtons = document.querySelectorAll('.startPauseTask');

  // toggle start/pause buttons
  for (let i = 0, len = startPauseButtons.length; i < len; i++) {
    startPauseButtons[i].addEventListener('click', (event) => {
      const state = event.target.attributes['data-state'].value;
      const id = event.target.attributes['data-taskId'].value;
      if (state === "started") {
        event.target.setAttribute('data-state', "paused");
        event.target.innerHTML = "Start"
      } else if (state === "paused") {
        event.target.setAttribute('data-state', "started");
        event.target.innerHTML = "Pause"
      }
    });
  }

  // updates running tasks every minute.
  setInterval(() => {
    for (let i = 0, len = startPauseButtons.length; i < len; i++) {
      let state = startPauseButtons[i].attributes['data-state'].value;
      let id = startPauseButtons[i].attributes['data-taskId'].value;
      if (state === "started") {
        fetch(`/api/tasks/heartbeat/${id}`, {
          method: 'PUT'
        }).then(function(res) {
          console.log('Incremented minutes spent on task', id);
        }).catch(function(err) {
          console.log(err)
        });
      }
    }
  }, 60000);

  const nestedTasksDivs = document.querySelectorAll('.nestedTasks');
  for (let i = 0, len = nestedTasksDivs.length; i < len; i++) {
    const ntd = nestedTasksDivs[i];
    const rootTaskId = ntd.getAttribute("data-root-task-id");
    let nestedTasksHtml = "";
    fetch(`/api/tasks/${rootTaskId}`)
      .then(function(res) {
        return res.json();
      })
      .then(function(tasks) {
        console.log(tasks);
        for (let i = 0, len = tasks.length; i < len; i++) {
          if (tasks[i].title !== undefined) {
            nestedTasksHtml += `<p><a href="task/${tasks[i].id}">${tasks[i].title}</a></p>`;
          }
        }
        ntd.innerHTML = nestedTasksHtml;
      })
      .catch(function(err) {
        console.log(err)
      });
  }

  const completeButtons = document.querySelectorAll('.taskComplete');
  for (let i = 0, len = completeButtons.length; i < len; i++) {
    completeButtons[i].addEventListener('click', (event) => {
      const id = event.target.attributes['data-taskId'].value;
      fetch(`/api/tasks/complete/${id}`, {
        method: 'PUT'
      }).then(function(res) {
        location.reload();
      }).catch(function(err) {
        console.log(err)
      });
    });
  }

  const incompleteButtons = document.querySelectorAll('.taskIncomplete');
  for (let i = 0, len = incompleteButtons.length; i < len; i++) {
    incompleteButtons[i].addEventListener('click', (event) => {
      const id = event.target.attributes['data-taskId'].value;
      fetch(`/api/tasks/incomplete/${id}`, {
        method: 'PUT'
      }).then(function(res) {
        location.reload();
      }).catch(function(err) {
        console.log(err)
      });
    });
  }

  const logoutButton = document.querySelector("#logout");
  logoutButton.addEventListener('click', (event) => {
    window.location.href = "/logout";
  });
</script>